name: Mutation Testing

on:
  pull_request:
    branches: [main]
    paths:
      - 'trading212-mcp-server/src/**'
      - 'trading212-mcp-server/Cargo.toml'
      - 'trading212-mcp-server/Cargo.lock'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read
  pull-requests: write

jobs:
  mutation-testing:
    name: Run Mutation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./trading212-mcp-server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            trading212-mcp-server/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('trading212-mcp-server/Cargo.lock') }}

      - name: Install cargo-binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/v1.15.5/install-from-binstall-release.sh | bash

      - name: Install cargo-mutants
        run: cargo binstall --no-confirm --locked cargo-mutants@25.3.1

      - name: Run mutation testing
        if: github.event_name == 'pull_request'
        run: |
          # Generate diff with correct paths
          git diff ${{ github.event.pull_request.base.sha }}..${{ github.sha }} \
            | sed 's|trading212-mcp-server/||g' > pr-changes.diff

          # Run mutation testing (exit code 2 means missed mutations, which is expected)
          # Use || true to prevent -e flag from exiting immediately
          cargo mutants --in-diff pr-changes.diff --timeout 30 --output mutants.out || exit_code=$?

          # cargo-mutants creates outcomes.json in a nested directory structure
          # Find and move it to the expected location
          if [ -f "mutants.out/mutants.out/outcomes.json" ]; then
            cp mutants.out/mutants.out/outcomes.json mutants.out/outcomes.json
            echo "Found and copied outcomes.json from nested directory"
          elif [ -f "mutants.out/outcomes.json" ]; then
            echo "outcomes.json found in expected location"
          fi

          # Set exit_code to 0 if not set (command succeeded)
          exit_code=${exit_code:-0}

          # Handle results: 0=all caught, 2=some missed (both are success), other=real failure
          if [ $exit_code -eq 0 ] || [ $exit_code -eq 2 ]; then
            echo "Mutation testing completed successfully (exit code: $exit_code)"
            # Check if outcomes.json was created
            if [ ! -f "mutants.out/outcomes.json" ]; then
              echo "WARNING: outcomes.json not found despite successful exit"
              mkdir -p mutants.out
              echo '{"total_mutants":0,"caught":0,"missed":0,"unviable":0,"timeout":0}' > mutants.out/outcomes.json
            fi
          else
            echo "Mutation testing failed with unexpected exit code: $exit_code"
            if [ ! -f "mutants.out/outcomes.json" ]; then
              echo "Creating fallback outcomes.json due to failure"
              mkdir -p mutants.out
              echo '{"total_mutants":0,"caught":0,"missed":0,"unviable":0,"timeout":0}' > mutants.out/outcomes.json
            fi
            exit 1  # Fail the workflow for real errors
          fi

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## üß¨ Mutation Testing Results\n\n';

            try {
              if (fs.existsSync('trading212-mcp-server/mutants.out/outcomes.json')) {
                const outcomes = JSON.parse(
                  fs.readFileSync('trading212-mcp-server/mutants.out/outcomes.json', 'utf8')
                );

                // cargo-mutants stores summary directly in the root, not nested under summary
                const total = outcomes.total_mutants || 0;
                const caught = outcomes.caught || 0;
                const missed = outcomes.missed || 0;
                const timeout = outcomes.timeout || 0;
                const unviable = outcomes.unviable || 0;
                const score = total > 0 ? ((caught / total) * 100).toFixed(1) : 0;

                comment += `**Score: ${score}%** | `;
                comment += `Total: ${total} | Caught: ${caught} | Missed: ${missed}`;
                if (unviable > 0) comment += ` | Unviable: ${unviable}`;
                if (timeout > 0) comment += ` | Timeout: ${timeout}`;

                if (missed > 0) {
                  comment += `\n\n‚ö†Ô∏è ${missed} mutations were not caught by tests.`;
                }
              } else {
                comment += 'No mutations found in changed lines.';
              }
            } catch (e) {
              comment += `Error: ${e.message}`;
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });